{"version":3,"file":"index.jsx","sourceRoot":"","sources":["index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAa,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAEpD,OAAO,OAAO,MAAM,YAAY,CAAA;AAChC,OAAO,KAAK,MAAM,UAAU,CAAA;AAO5B,MAAM,CAAC,OAAO,UAAU,QAAQ,CAAC,KAAmB;IAC1C,IAAA,IAAI,GAAoC,KAAK,KAAzC,EAAE,KAAkC,KAAK,SAApB,EAAnB,QAAQ,mBAAG,QAAQ,KAAA,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAU;IAC/C,IAAA,KAAkB,QAAQ,CAAC,KAAK,CAAC,EAAhC,IAAI,QAAA,EAAE,OAAO,QAAmB,CAAA;IAEvC,IAAM,SAAS,GAAG,OAAO,CAAC;QACxB,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,KAAK,CAAC;YACX,KAAK,SAAS,CAAC;YACf,KAAK,UAAU;gBACb,OAAO,mBAAmB,CAAA;YAC5B,KAAK,QAAQ,CAAC;YACd,KAAK,YAAY,CAAC;YAClB,KAAK,aAAa;gBAChB,OAAO,qBAAqB,CAAA;YAC9B;gBACE,OAAO,SAAS,CAAA;QACpB,CAAC;IACH,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAA;IAEd,OAAO,CACL,CAAC,GAAG,CACF,YAAY,CAAC,CAAC;YACZ,OAAO,CAAC,IAAI,CAAC,CAAA;QACf,CAAC,CAAC,CACF,YAAY,CAAC,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,CAAA;QAChB,CAAC,CAAC,CAEF;MAAA,CAAC,OAAO,CACN,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAG,CAAC,CACnD,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,SAAS,CAAC,CAAC,SAAS,CAAC,CAErB;QAAA,CAAC,QAAQ,CACX;MAAA,EAAE,OAAO,CACX;IAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACH,CAAC","sourcesContent":["import { ReactNode, useMemo, useState } from 'react'\nimport { WithPlacement } from '../../shared/interfaces'\nimport Popover from '../Popover'\nimport Label from '../Label'\n\nexport interface TooltipProps extends WithPlacement {\n  text: string\n  children?: ReactNode\n}\n\nexport default function Tooltips(props: TooltipProps) {\n  const { text, position = 'bottom', children } = props\n  const [show, SetShow] = useState(false)\n\n  const animation = useMemo(() => {\n    switch (position) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        return 'centered-slide-up'\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        return 'centered-slide-down'\n      default:\n        return 'fade-in'\n    }\n  }, [position])\n\n  return (\n    <div\n      onMouseEnter={() => {\n        SetShow(true)\n      }}\n      onMouseLeave={() => {\n        SetShow(false)\n      }}\n    >\n      <Popover\n        show={show}\n        popover={<Label text={text} color='dark' shadow />}\n        position={position}\n        animation={animation}\n      >\n        {children}\n      </Popover>\n    </div>\n  )\n}\n"]}