{"version":3,"file":"index.jsx","sourceRoot":"","sources":["index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAa,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAA;AACpD,OAAO,EAAgC,cAAc,EAAE,MAAM,yBAAyB,CAAA;AACtF,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,SAAS,MAAM,uBAAuB,CAAA;AAU7C,MAAM,CAAC,OAAO,UAAU,OAAO,CAAC,KAAmB;IACzC,IAAA,KAAsF,KAAK,KAAjF,EAAV,IAAI,mBAAC,KAAK,KAAA,EAAE,KAA0E,KAAK,MAApE,EAAX,KAAK,mBAAC,KAAK,KAAA,EAAE,KAA6D,KAAK,SAAlD,EAAhB,QAAQ,mBAAG,KAAK,KAAA,EAAE,OAAO,GAAoC,KAAK,QAAzC,EAAE,KAAkC,KAAK,UAApB,EAAnB,SAAS,mBAAC,SAAS,KAAA,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAU;IAE7F,IAAA,KAA2E,cAAc,CAAC,QAAQ,CAAC,EAAjG,GAAG,SAAA,EAAE,MAAM,YAAA,EAAE,IAAI,UAAA,EAAE,KAAK,WAAA,EAAE,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAE,UAAU,gBAAA,EAAE,WAAW,iBAA6B,CAAA;IAEzG,IAAM,SAAS,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAA;IAC9C,IAAM,YAAY,GAAG,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;IAEpD,SAAS,CAAC;QACR,IAAG,IAAI,EAAC,CAAC;YACP,YAAY,CAAC,IAAI,EAAE,CAAA;QACrB,CAAC;aAAI,CAAC;YACJ,YAAY,CAAC,IAAI,EAAE,CAAA;QACrB,CAAC;IACH,CAAC,EAAE,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAA;IAExB,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CACnC;MAAA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAClB,SAAS,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,KAAK,IAAI,YAAY,EAAE;YAC7D,oBAAoB,EAAE,GAAG,IAAI,OAAO,IAAI,QAAQ;YAChD,iBAAiB,EAAE,MAAM,IAAI,UAAU,IAAI,WAAW;YACtD,2BAA2B,EAAE,GAAG,IAAI,MAAM;YAC1C,QAAQ,EAAE,OAAO,IAAI,UAAU;YAC/B,SAAS,EAAE,QAAQ,IAAI,WAAW;YAClC,mBAAmB,EAAE,IAAI;YACzB,kBAAkB,EAAE,KAAK;YACzB,0BAA0B,EAAE,IAAI,IAAI,KAAK;SAC1C,CAAC,CAAC,CAEH;QAAA,CAAC,OAAO,CACV;MAAA,EAAE,GAAG,CACL;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACH,CAAC","sourcesContent":["import { ReactNode, useEffect, useRef } from 'react'\nimport { AnimationType, WithPlacement, parsePlacement } from '../../shared/interfaces'\nimport clsx from 'clsx'\nimport useReveal from '../../hooks/useReveal'\n\nexport interface PopoverProps extends WithPlacement {\n  show?: boolean\n  popover: any\n  animation?: AnimationType\n  block?: boolean\n  children: ReactNode\n}\n\nexport default function Popover(props: PopoverProps) {\n  const { show=false, block=false, position = 'top', popover, animation='fade-in', children } = props\n\n  const { top, bottom, left, right, topLeft, topRight, bottomLeft, bottomRight } = parsePlacement(position)\n\n  const targetRef = useRef<HTMLDivElement>(null)\n  const targetReveal = useReveal(targetRef, animation)\n\n  useEffect(()=>{\n    if(show){\n      targetReveal.show()\n    }else{\n      targetReveal.hide()\n    }\n  }, [show, targetReveal])\n\n  return (\n    <div className={clsx('relative', {})}>\n      <div ref={targetRef}\n        className={clsx('absolute hidden z-10', block && 'min-w-full', {\n          'bottom-full pb-1.5': top || topLeft || topRight,\n          'top-full pt-1.5': bottom || bottomLeft || bottomRight,\n          'left-1/2 -translate-x-1/2': top || bottom,\n          'left-0': topLeft || bottomLeft,\n          'right-0': topRight || bottomRight,\n          'right-full pr-1.5': left,\n          'left-full pl-1.5': right,\n          'top-1/2 -translate-y-1/2': left || right,\n        })}\n      >\n        {popover}\n      </div>\n      {children}\n    </div>\n  )\n}\n"]}